import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive
import os

# 挂载 Google 云端硬盘
drive.mount('/content/drive')

# 系统参数
rod_length = 10  # 杆子长度，单位：米
omega = 2 * np.pi / 2  # 每 2 秒转一圈，角速度
slider_speed = 10  # 滑块速度，单位：米/秒
time_interval = 0.05  # 时间步长，单位：秒
total_time = 8  # 总时间，单位：秒
start_delay = 0.5  # 第二组杆子和滑块延迟启动时间
slider_mass = 200  # 滑块质量，单位：千克

# 时间数组
times = np.arange(0, total_time, time_interval)

# 初始化滑块方向（顺时针旋转的杆子朝左，逆时针旋转的杆子朝右）
slider_directions = [1, -1, 0, 0]  # 前两根杆子的滑块方向，后两根杆子延迟滑块停止

# 滑块初始位置（从杆子中点开始）
slider_positions = [0, 0, 0, 0]  # 滑块相对杆子中心的初始位置为 0

# 用于记录每组的离心力总和
centrifugal_force_group1 = []  # 第一组杆子的离心力总和
centrifugal_force_group2 = []  # 第二组杆子的离心力总和
centrifugal_force_total = []  # 四根杆子的离心力总和

for t in times:
    # 初始化角度
    angles = [None] * 4

    # 第一组杆子：从 t = 0 开始旋转
    angles[0] = omega * t  # 顺时针
    angles[1] = -omega * t  # 逆时针

    # 第二组杆子：延迟 0.5 秒开始旋转
    if t >= start_delay:
        t_adjusted = t - start_delay
        angles[2] = omega * t_adjusted  # 顺时针
        angles[3] = -omega * t_adjusted  # 逆时针

        # 当后两根杆子开始旋转时，启动其滑块
        if slider_directions[2] == 0:  # 确保只发送信号一次
            slider_directions[2] = 1  # 向左
            slider_directions[3] = -1  # 向右
    else:
        angles[2] = 0
        angles[3] = 0

    # 更新滑块位置和方向
    for i in range(4):
        if slider_directions[i] == 1:  # 滑块正向移动，朝左
            slider_positions[i] += slider_speed * time_interval
            if slider_positions[i] >= rod_length / 2:  # 到达杆子右端
                slider_positions[i] = rod_length / 2  # 防止越界
                slider_directions[i] = -1  # 改为反向移动
        elif slider_directions[i] == -1:  # 滑块反向移动，朝右
            slider_positions[i] -= slider_speed * time_interval
            if slider_positions[i] <= -rod_length / 2:  # 到达杆子左端
                slider_positions[i] = -rod_length / 2  # 防止越界
                slider_directions[i] = 1  # 改为正向移动

    # 计算每根杆子的离心力
    forces = []
    for i, angle in enumerate(angles):
        if angle is not None:
            # 滑块的径向位置
            r = slider_positions[i]
            # 离心力大小
            Fc = slider_mass * omega**2 * abs(r)
            forces.append(Fc)
        else:
            forces.append(0)

    # 记录每组和总离心力
    group1_force = sum(forces[:2])  # 第一组杆子的离心力总和
    group2_force = sum(forces[2:])  # 第二组杆子的离心力总和
    total_force = group1_force + group2_force  # 全部杆子的离心力总和

    centrifugal_force_group1.append(group1_force)
    centrifugal_force_group2.append(group2_force)
    centrifugal_force_total.append(total_force)

# 绘制离心力变化曲线
plt.figure(figsize=(10, 6))

# 第一组杆子离心力总和曲线
plt.plot(times, centrifugal_force_group1, label="第一组杆子离心力总和", color="blue", linewidth=1.5)

# 第二组杆子离心力总和曲线
plt.plot(times, centrifugal_force_group2, label="第二组杆子离心力总和", color="green", linewidth=1.5)

# 四根杆子离心力总和曲线
plt.plot(times, centrifugal_force_total, label="四根杆子离心力总和", color="black", linewidth=2, linestyle="--")

plt.title("离心力总和变化曲线", fontsize=14)
plt.xlabel("时间 (s)", fontsize=12)
plt.ylabel("离心力 (N)", fontsize=12)
plt.legend()
plt.grid()

# 保存图像到 Google 云端硬盘
save_path_force = '/content/drive/My Drive/Colab Notebooks/centrifugal_force_groups.png'

# 检查文件夹是否存在，不存在则创建
os.makedirs(os.path.dirname(save_path_force), exist_ok=True)

plt.savefig(save_path_force, dpi=300, bbox_inches="tight")
plt.show()

print(f"离心力变化图已保存到: {save_path_force}")
