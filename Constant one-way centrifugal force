import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive

# 挂载 Google 云端硬盘
drive.mount('/content/drive')

# 系统参数
rod_length = 10  # 杆子长度，单位：米
omega = 2 * np.pi / 2  # 每 2 秒转一圈，角速度 omega = 2pi / T, 这里 T = 2 秒
m = 1  # 滑块质量，单位：千克
time_interval = 0.05  # 时间步长，单位：秒
total_time = 8  # 总时间，单位：秒
half_cycle = total_time / 2  # 每个装置的一个周期，单位：秒

# 时间数组
times = np.arange(0, total_time, time_interval)

# 滑块位置计算函数
def slider_position(t, rod_length, half_cycle):
    """
    计算物体在杆子上的位置，物体在中心与端点之间来回运动
    """
    # 每个周期内，物体在中心和端点之间来回运动
    if t <= half_cycle:
        return (t / half_cycle) * (rod_length / 2)  # 从中心移动到端点
    else:
        return (total_time - t) / half_cycle * (rod_length / 2)  # 从端点返回中心

# 计算离心力的垂直分量
def centrifugal_force_vertical(t, rod_length, omega, m):
    """
    计算离心力在垂直方向上的分量
    """
    r = slider_position(t % total_time, rod_length, half_cycle)  # 计算滑块的径向位置
    Fc = m * omega**2 * r  # 离心力大小
    theta = omega * t  # 当前角度
    F_vertical = Fc * np.abs(np.sin(theta))  # 垂直方向分量，确保为正值
    return F_vertical

# 第一组杆子计算
vertical_forces_cw_1 = []  # 第一组顺时针
vertical_forces_ccw_1 = []  # 第一组逆时针
for t in times:
    # 顺时针装置
    F_vertical_cw_1 = centrifugal_force_vertical(t, rod_length, omega, m)
    vertical_forces_cw_1.append(F_vertical_cw_1)
    
    # 逆时针装置
    F_vertical_ccw_1 = centrifugal_force_vertical(t + half_cycle, rod_length, omega, m)
    vertical_forces_ccw_1.append(F_vertical_ccw_1)

# 计算第一组的总离心力
total_vertical_forces_1 = np.array(vertical_forces_cw_1) + np.array(vertical_forces_ccw_1)

# 第二组杆子补偿计算
total_vertical_forces_2 = []
for t, F1 in zip(times, total_vertical_forces_1):
    if F1 >= max(total_vertical_forces_1):  # 如果第一组离心力达到巅峰，第二组杆子补偿减少的部分
        F2 = 0  # 第二组此时不提供额外力
    else:
        F2 = max(total_vertical_forces_1) - F1  # 第二组补偿减少的部分
    total_vertical_forces_2.append(F2)

# 总合力计算
total_vertical_forces = total_vertical_forces_1 + np.array(total_vertical_forces_2)

# 绘制第一张图：第一组、第二组及总合力
plt.figure(figsize=(10, 6))
plt.plot(times, total_vertical_forces_1, label="第一组杆子离心力 $F_{vertical, 1}$", color='blue')
plt.plot(times, total_vertical_forces_2, label="第二组杆子离心力补偿 $F_{vertical, 2}$", color='orange')
plt.plot(times, total_vertical_forces, label="总垂直方向离心力合力 $F_{vertical, total}$", color='green')
plt.axhline(np.mean(total_vertical_forces), color='red', linestyle='--', linewidth=0.8, label="恒定合力（均值）")
plt.title("两组杆子协同运作的离心力", fontsize=14)
plt.xlabel("时间 (s)", fontsize=12)
plt.ylabel("垂直方向离心力 (N)", fontsize=12)
plt.legend()
plt.grid()

# 保存第一张图
save_path_1 = '/content/drive/My Drive/Colab Notebooks/force_compensation_detail.png'
plt.savefig(save_path_1, dpi=300, bbox_inches="tight")
plt.show()

# 绘制第二张图：仅总离心力合力
plt.figure(figsize=(10, 6))
plt.plot(times, total_vertical_forces, label="两组杆子的总离心力合力 $F_{vertical, total}$", color='green')
plt.axhline(np.mean(total_vertical_forces), color='red', linestyle='--', linewidth=0.8, label="恒定合力（均值）")
plt.title("两组杆子协同运作的总离心力合力", fontsize=14)
plt.xlabel("时间 (s)", fontsize=12)
plt.ylabel("垂直方向离心力合力 (N)", fontsize=12)
plt.legend()
plt.grid()

# 保存第二张图
save_path_2 = '/content/drive/My Drive/Colab Notebooks/total_centrifugal_force.png'
plt.savefig(save_path_2, dpi=300, bbox_inches="tight")
plt.show()

print(f"图片已保存到: {save_path_1} 和 {save_path_2}")
